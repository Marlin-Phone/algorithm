/**
 * @nc app=nowcoder id=508378c0823c423baa723ce448cbfd0c topic=295 question=634 lang=C++
 * 2025-08-17 23:52:26
 * https://www.nowcoder.com/practice/508378c0823c423baa723ce448cbfd0c?tpId=295&tqId=634
 * [BM29] 二叉树中和为某一值的路径(一)
 */

/** @nc code=start */

/**
 * struct TreeNode {
 *	int val;
 *	struct TreeNode *left;
 *	struct TreeNode *right;
 *	TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 * };
 */
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param root TreeNode类 
     * @param sum int整型 
     * @return bool布尔型
     */
    int mysum = 0;
    bool flag;

    void dfs(TreeNode* root, int sum){
        if(root == nullptr){
            return;
        }
        mysum += root->val;
        if(root->left){
            dfs(root->left, sum);
        }
        if(root->right){
            dfs(root->right, sum);
        }
        
        if(root->left == nullptr && root->right == nullptr){
            if(mysum == sum){
                flag = true;
                cout << "flag = true" << endl;
            }
        }

        mysum -= root->val;
    }
    bool hasPathSum(TreeNode* root, int sum) {
        dfs(root, sum);
        
        return flag;
    }
};

/** @nc code=end */
