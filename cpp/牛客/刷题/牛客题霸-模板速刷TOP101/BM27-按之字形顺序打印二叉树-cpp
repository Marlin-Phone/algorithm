/**
 * @nc app=nowcoder id=91b69814117f4e8097390d107d2efbe0 topic=295 question=23454 lang=C++
 * 2025-08-13 17:15:20
 * https://www.nowcoder.com/practice/91b69814117f4e8097390d107d2efbe0?tpId=295&tqId=23454
 * [BM27] 按之字形顺序打印二叉树
 */

/** @nc code=start */

/**
 * struct TreeNode {
 *	int val;
 *	struct TreeNode *left;
 *	struct TreeNode *right;
 *	TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 * };
 */
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param pRoot TreeNode类 
     * @return int整型vector<vector<>>
     */
    vector<vector<int> > Print(TreeNode* pRoot) {
        vector<vector<int>> ans;
        if (pRoot == nullptr){
            return ans;
        }
        queue<TreeNode*> que;
        que.push(pRoot);
        int toreverse = 0;
        while(!que.empty()){
            int size = que.size();
            vector<int> temp;
            for(int i = 0; i < size; i++){
                auto t = que.front();
                que.pop();
                temp.push_back(t->val);
                if (t->left!= nullptr){
                    que.push(t->left);
                }
                if (t->right!= nullptr){
                    que.push(t->right);
                }
            }
            if(toreverse == 1){
                reverse(temp.begin(), temp.end());
            }
            toreverse ^= 1;
            ans.push_back(temp);
        }
        return ans;
    }
};

/** @nc code=end */
