/**
 * @nc app=nowcoder id=c56f6c70fb3f4849bc56e33ff2a50b6b topic=295 question=1008772 lang=C++
 * 2025-08-04 15:35:54
 * https://www.nowcoder.com/practice/c56f6c70fb3f4849bc56e33ff2a50b6b?tpId=295&tqId=1008772
 * [BM11] 链表相加(二)
 */

/** @nc code=start */

/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 *	ListNode(int x) : val(x), next(nullptr) {}
 * };
 */
class Solution {
public:
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     * 
     * @param head1 ListNode类 
     * @param head2 ListNode类 
     * @return ListNode类
     */
    ListNode* addInList(ListNode* head1, ListNode* head2) {
        if(head1 == nullptr){
            return head2;
        }
        if(head2 == nullptr){
            return head1;
        }
        ListNode* cur = head1;
        ListNode* pre = nullptr;
        ListNode* next = nullptr;
        int cnt1 = 0;
        int cnt2 = 0;
        
        while(cur != nullptr){
            cnt1++;
            next = cur->next;

            cur->next = pre;
            pre = cur;
            cur = next;
        }
        head1 = pre;
        cur = head2;
        pre = nullptr;
        while(cur != nullptr){
            cnt2++;
            next = cur->next;

            cur->next = pre;
            pre = cur;
            cur = next;
        }
        head2 = pre;

        ListNode* p = cnt1 > cnt2 ? head1 : head2;
        ListNode* q = cnt1 > cnt2 ? head2 : head1;
        int carry = 0;
        while(p != nullptr && q != nullptr){
            p->val += q->val + carry;
            carry = p->val / 10;
            p->val %= 10;
            p = p->next;
            q = q->next;
        }
        while(p != nullptr){
            p->val += carry;
            carry = p->val / 10;
            p->val %= 10;
            p = p->next;
        }
        p = head1;
        while(p->next != nullptr){
            p = p->next;
        }
        
        if(carry != 0){
            p->next = new ListNode(carry);
        }

        cur = cnt1 > cnt2 ? head1 : head2;
        pre = nullptr;
        next = nullptr;
        while(cur != nullptr){
            next = cur->next;

            cur->next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
};

/** @nc code=end */
